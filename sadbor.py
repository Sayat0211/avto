import streamlit as st
import json
import os
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

DATA_PATH = "car_data_full.json"

def load_data():
    if os.path.exists(DATA_PATH):
        with open(DATA_PATH, "r", encoding="utf-8") as f:
            return json.load(f)
    else:
        return {
            "–ö—É–∑–æ–≤": {
                '–ø–∏–∫–∞–ø': "–ü–∏–∫–∞–ø ‚Äî —ç—Ç–æ –º–æ—â–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å –æ—Ç–∫—Ä—ã—Ç—ã–º –≥—Ä—É–∑–æ–≤—ã–º –æ—Ç—Å–µ–∫–æ–º. –ò–¥–µ–∞–ª–µ–Ω –¥–ª—è –ø–µ—Ä–µ–≤–æ–∑–∫–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, —Å–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –∏ –∫—Ä—É–ø–Ω–æ–≥–∞–±–∞—Ä–∏—Ç–Ω—ã—Ö –≥—Ä—É–∑–æ–≤. –ß–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–µ—Ä–º–µ—Ä–∞–º–∏, —Å—Ç—Ä–æ–∏—Ç–µ–ª—è–º–∏ –∏ –ª—é–±–∏—Ç–µ–ª—è–º–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞. –û–±–ª–∞–¥–∞–µ—Ç –≤—ã—Å–æ–∫–∏–º –∫–ª–∏—Ä–µ–Ω—Å–æ–º, –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –±—É–∫—Å–∏—Ä–æ–≤–∫–∏ —Ç—è–∂–µ–ª—ã—Ö –ø—Ä–∏—Ü–µ–ø–æ–≤ –∏ –æ–±—ã—á–Ω–æ –æ—Å–Ω–∞—â–µ–Ω –ø–æ–ª–Ω—ã–º –ø—Ä–∏–≤–æ–¥–æ–º. –õ—É—á—à–∏–π –≤—ã–±–æ—Ä –¥–ª—è –±–µ–∑–¥–æ—Ä–æ–∂—å—è, —Ç—è–∂–µ–ª—ã—Ö —É—Å–ª–æ–≤–∏–π —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ –∏ —Ä–∞–±–æ—Ç—ã –≤ —Å–µ–ª—å—Å–∫–æ–π –º–µ—Å—Ç–Ω–æ—Å—Ç–∏.",
                '–º–∏–Ω–∏–≤—ç–Ω': "–ú–∏–Ω–∏–≤—ç–Ω ‚Äî —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ—Ä–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –¥–ª—è –ø–µ—Ä–µ–≤–æ–∑–∫–∏ –±–æ–ª—å—à–∏—Ö —Å–µ–º–µ–π –∏–ª–∏ –≥—Ä—É–ø–ø –ª—é–¥–µ–π. –û—Å–Ω–∞—â–µ–Ω —Ç—Ä–µ–º—è —Ä—è–¥–∞–º–∏ —Å–∏–¥–µ–Ω–∏–π, –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–º —Å–∞–ª–æ–Ω–æ–º –∏ –±–æ–ª—å—à–∏–º –±–∞–≥–∞–∂–Ω—ã–º –æ—Ç–¥–µ–ª–µ–Ω–∏–µ–º. –ò–¥–µ–∞–ª–µ–Ω –¥–ª—è –¥–∞–ª—å–Ω–∏—Ö –ø–æ–µ–∑–¥–æ–∫, —Å–µ–º–µ–π–Ω—ã—Ö –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π –∏ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫ –≤ —à–∫–æ–ª—É –∏–ª–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. –ì–ª–∞–≤–Ω—ã–µ –ø–ª—é—Å—ã: –≤–º–µ—Å—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∫–æ–º—Ñ–æ—Ä—Ç–∞, –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Å–∏—Å—Ç–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.",
                '–∫—Ä–æ—Å—Å–æ–≤–µ—Ä': "–ö—Ä–æ—Å—Å–æ–≤–µ—Ä ‚Äî —ç—Ç–æ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å, —Å–æ—á–µ—Ç–∞—é—â–∏–π —á–µ—Ä—Ç—ã –≤–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫–∞ –∏ –ª–µ–≥–∫–æ–≤–æ–≥–æ –∞–≤—Ç–æ. –û—Ç–ª–∏—á–∞–µ—Ç—Å—è –≤—ã—Å–æ–∫–∏–º –∫–ª–∏—Ä–µ–Ω—Å–æ–º, —É–¥–æ–±–Ω–æ–π –ø–æ—Å–∞–¥–∫–æ–π, –≤–º–µ—Å—Ç–∏—Ç–µ–ª—å–Ω—ã–º —Å–∞–ª–æ–Ω–æ–º –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏. –ü–æ–¥—Ö–æ–¥–∏—Ç –∫–∞–∫ –¥–ª—è –≥–æ—Ä–æ–¥—Å–∫–æ–π –µ–∑–¥—ã, —Ç–∞–∫ –∏ –¥–ª—è –ø–æ–µ–∑–¥–æ–∫ –ø–æ –Ω–µ–∞—Å—Ñ–∞–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –¥–æ—Ä–æ–≥–∞–º. –ò–¥–µ–∞–ª–µ–Ω –¥–ª—è –ª—é–¥–µ–π, –≤–µ–¥—É—â–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏, —Å–µ–º–µ–π —Å –¥–µ—Ç—å–º–∏, –ª—é–±–∏—Ç–µ–ª–µ–π –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π.",
                '—Å–µ–¥–∞–Ω': "–°–µ–¥–∞–Ω ‚Äî –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ç–∏–ø –∞–≤—Ç–æ–º–æ–±–∏–ª—è —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º –±–∞–≥–∞–∂–Ω–∏–∫–æ–º –∏ –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–º —Å–∞–ª–æ–Ω–æ–º. –õ—É—á—à–∏–π –≤—ã–±–æ—Ä –¥–ª—è –≥–æ—Ä–æ–¥—Å–∫–æ–π —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ –∏ –¥–∞–ª—å–Ω–∏—Ö –ø–æ–µ–∑–¥–æ–∫ –ø–æ —Ö–æ—Ä–æ—à–∏–º –¥–æ—Ä–æ–≥–∞–º. –û—Ç–ª–∏—á–∞–µ—Ç—Å—è –≤—ã—Å–æ–∫–∏–º —É—Ä–æ–≤–Ω–µ–º —à—É–º–æ–∏–∑–æ–ª—è—Ü–∏–∏, —É–¥–æ–±—Å—Ç–≤–æ–º –ø–æ—Å–∞–¥–∫–∏ –∏ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å—é –Ω–∞ —Ç—Ä–∞—Å—Å–µ. –ü–ª—é—Å—ã: –∫–æ–º—Ñ–æ—Ä—Ç, —É–ø—Ä–∞–≤–ª—è–µ–º–æ—Å—Ç—å, –ø—Ä–µ–∑–µ–Ω—Ç–∞–±–µ–ª—å–Ω—ã–π –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥.",
                '—Ö—ç—Ç—á–±–µ–∫': "–•—ç—Ç—á–±–µ–∫ ‚Äî –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å —É–∫–æ—Ä–æ—á–µ–Ω–Ω–æ–π –∑–∞–¥–Ω–µ–π —á–∞—Å—Ç—å—é –∏ –ø–æ–¥–Ω–∏–º–∞—é—â–µ–π—Å—è –≤–≤–µ—Ä—Ö –¥–≤–µ—Ä—å—é –±–∞–≥–∞–∂–Ω–∏–∫–∞. –ò–¥–µ–∞–ª–µ–Ω –¥–ª—è –≥–æ—Ä–æ–¥—Å–∫–æ–π –∂–∏–∑–Ω–∏: —É–¥–æ–±–µ–Ω –≤ –ø–∞—Ä–∫–æ–≤–∫–µ, —ç–∫–æ–Ω–æ–º–∏—á–µ–Ω –≤ —Ä–∞—Å—Ö–æ–¥–µ —Ç–æ–ø–ª–∏–≤–∞, –º–∞–Ω–µ–≤—Ä–µ–Ω–µ–Ω –≤ –ø—Ä–æ–±–∫–∞—Ö. –ß–∞—Å—Ç–æ –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –º–æ–ª–æ–¥—ã–º–∏ –ª—é–¥—å–º–∏, —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏, –≥–æ—Ä–æ–¥—Å–∫–∏–º–∏ –∂–∏—Ç–µ–ª—è–º–∏, –∫–æ—Ç–æ—Ä—ã–º –≤–∞–∂–Ω—ã –º–æ–±–∏–ª—å–Ω–æ—Å—Ç—å –∏ —ç–∫–æ–Ω–æ–º–∏—è.",
                '—É–Ω–∏–≤–µ—Ä—Å–∞–ª': "–£–Ω–∏–≤–µ—Ä—Å–∞–ª ‚Äî –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å —É–¥–ª–∏–Ω–µ–Ω–Ω—ã–º –∫—É–∑–æ–≤–æ–º –∏ —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º –±–∞–≥–∞–∂–Ω—ã–º –æ—Ç–¥–µ–ª–µ–Ω–∏–µ–º. –û–ø—Ç–∏–º–∞–ª–µ–Ω –¥–ª—è —Å–µ–º–µ–π–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫, –ø–µ—Ä–µ–≤–æ–∑–∫–∏ –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–∞–≥–∞–∂–∞, –¥–æ–º–∞—à–Ω–∏—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö –∏–ª–∏ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–≥–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è. –°–æ—á–µ—Ç–∞–µ—Ç —É–¥–æ–±—Å—Ç–≤–æ —Å–µ–¥–∞–Ω–∞ —Å –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é –∫—Ä–æ—Å—Å–æ–≤–µ—Ä–∞. –í—ã–±–æ—Ä –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ü–µ–Ω–∏—Ç –ø—Ä–∞–∫—Ç–∏—á–Ω–æ—Å—Ç—å –∏ –∫–æ–º—Ñ–æ—Ä—Ç –≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è—Ö.",
                '–≤–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫': "–í–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫ ‚Äî –∫—Ä—É–ø–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å –≤—ã—Å–æ–∫–æ–π –ø—Ä–æ—Ö–æ–¥–∏–º–æ—Å—Ç—å—é, —É—Å–∏–ª–µ–Ω–Ω–æ–π –ø–æ–¥–≤–µ—Å–∫–æ–π –∏ –ø–æ–ª–Ω—ã–º –ø—Ä–∏–≤–æ–¥–æ–º. –°–ø–æ—Å–æ–±–µ–Ω –ø—Ä–µ–æ–¥–æ–ª–µ–≤–∞—Ç—å —Ç—è–∂–µ–ª—ã–µ –¥–æ—Ä–æ–∂–Ω—ã–µ —É—Å–ª–æ–≤–∏—è: –≥—Ä—è–∑—å, —Å–Ω–µ–≥, –∫–∞–º–Ω–∏, –±—Ä–æ–¥—ã. –ò–¥–µ–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è –æ—Ö–æ—Ç–Ω–∏–∫–æ–≤, —Ä—ã–±–æ–ª–æ–≤–æ–≤, –ª—é–±–∏—Ç–µ–ª–µ–π —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞, –∞ —Ç–∞–∫–∂–µ –¥–ª—è –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –≤ —Å–µ–ª—å—Å–∫–æ–π –º–µ—Å—Ç–Ω–æ—Å—Ç–∏. –ü–ª—é—Å—ã: –º–æ—â–Ω–æ—Å—Ç—å, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å, –ø—Ä–æ—Ö–æ–¥–∏–º–æ—Å—Ç—å."
            },
            "–¢—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è": {
                '–∞–≤—Ç–æ–º–∞—Ç': "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–ª–∞–≤–Ω—É—é –µ–∑–¥—É –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å –ø–µ—Ä–µ–¥–∞—á–∏. –ò–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≥–æ—Ä–æ–¥—Å–∫–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è, –ø—Ä–æ–±–æ–∫ –∏ –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π. –ü–æ–≤—ã—à–∞–µ—Ç –∫–æ–º—Ñ–æ—Ä—Ç –≤ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏, –æ—Å–æ–±–µ–Ω–Ω–æ –≤ –º–µ–≥–∞–ø–æ–ª–∏—Å–∞—Ö.",
                '–º–µ—Ö–∞–Ω–∏–∫–∞': "–ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∞—è –∫–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á –¥–∞–µ—Ç –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º. –õ—é–±–∏–º–∞ –æ–ø—ã—Ç–Ω—ã–º–∏ –≤–æ–¥–∏—Ç–µ–ª—è–º–∏ –∏ –∞–≤—Ç–æ–ª—é–±–∏—Ç–µ–ª—è–º–∏ –∑–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–∏–Ω–∞–º–∏—á–Ω–æ–≥–æ —Ä–∞–∑–≥–æ–Ω–∞ –∏ —ç–∫–æ–Ω–æ–º–∏—é —Ç–æ–ø–ª–∏–≤–∞. –¢—Ä–µ–±—É–µ—Ç –±–æ–ª—å—à–µ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è –∏ –Ω–∞–≤—ã–∫–æ–≤ –≤–æ–∂–¥–µ–Ω–∏—è, –æ—Å–æ–±–µ–Ω–Ω–æ –≤ –ø—Ä–æ–±–∫–∞—Ö."
            },
            "–¢–æ–ø–ª–∏–≤–æ": {
                '–±–µ–Ω–∑–∏–Ω': "–ë–µ–Ω–∑–∏–Ω–æ–≤—ã–µ –¥–≤–∏–≥–∞—Ç–µ–ª–∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç —Ö–æ—Ä–æ—à—É—é –¥–∏–Ω–∞–º–∏–∫—É —Ä–∞–∑–≥–æ–Ω–∞, —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç—å –∏ —Ç–∏—à–∏–Ω—É —Ä–∞–±–æ—Ç—ã. –ò–¥–µ–∞–ª—å–Ω—ã –¥–ª—è –≥–æ—Ä–æ–¥—Å–∫–æ–π –µ–∑–¥—ã –∏ —É–º–µ—Ä–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–≥–æ–≤. –®–∏—Ä–µ –¥–æ—Å—Ç—É–ø–Ω—ã –∏ –¥–µ—à–µ–≤–ª–µ –≤ —Ä–µ–º–æ–Ω—Ç–µ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –¥–∏–∑–µ–ª—å–Ω—ã–º–∏ –∏ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–º–∏.",
                '–¥–∏–∑–µ–ª—å': "–î–∏–∑–µ–ª—å–Ω—ã–µ –¥–≤–∏–≥–∞—Ç–µ–ª–∏ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –≤—ã—Å–æ–∫–æ–π —ç–∫–æ–Ω–æ–º–∏—á–Ω–æ—Å—Ç—å—é –Ω–∞ –¥–∞–ª—å–Ω–∏—Ö —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è—Ö –∏ –ø–æ–≤—ã—à–µ–Ω–Ω—ã–º –∫—Ä—É—Ç—è—â–∏–º –º–æ–º–µ–Ω—Ç–æ–º. –ò–¥–µ–∞–ª—å–Ω—ã –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –º–Ω–æ–≥–æ –µ–∑–¥–∏—Ç –ø–æ —Ç—Ä–∞—Å—Å–∞–º, –ø–µ—Ä–µ–≤–æ–∑–∏—Ç –≥—Ä—É–∑—ã –∏–ª–∏ –∂–∏–≤–µ—Ç –≤ —Å–µ–ª—å—Å–∫–æ–π –º–µ—Å—Ç–Ω–æ—Å—Ç–∏. –î–∏–∑–µ–ª—å–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –∏–º–µ—é—Ç –±–æ–ª—å—à–∏–π —Ä–µ—Å—É—Ä—Å –¥–≤–∏–≥–∞—Ç–µ–ª—è, –Ω–æ —Ç—Ä–µ–±—É—é—Ç —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è.",
                '—ç–ª–µ–∫—Ç—Ä–æ': "–≠–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–µ, –Ω–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞—è –≤—Ä–µ–¥–Ω—ã—Ö –≤–µ—â–µ—Å—Ç–≤. –û—Ç–ª–∏—á–∞—é—Ç—Å—è –æ—á–µ–Ω—å –Ω–∏–∑–∫–∏–º–∏ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ —Ä–∞—Å—Ö–æ–¥–∞–º–∏ –∏ —Ç–∏—à–∏–Ω–æ–π —Ö–æ–¥–∞. –ü–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è –∂–∏—Ç–µ–ª–µ–π –≥–æ—Ä–æ–¥–æ–≤ —Å —Ä–∞–∑–≤–∏—Ç–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –∑–∞—Ä—è–¥–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π.",
                '–≥–∏–±—Ä–∏–¥': "–ì–∏–±—Ä–∏–¥–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ —Å–æ–≤–º–µ—â–∞—é—Ç –±–µ–Ω–∑–∏–Ω–æ–≤—ã–π –¥–≤–∏–≥–∞—Ç–µ–ª—å –∏ —ç–ª–µ–∫—Ç—Ä–æ–º–æ—Ç–æ—Ä. –û–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç —ç–∫–æ–Ω–æ–º–∏—á–Ω–æ—Å—Ç—å –≤ –≥–æ—Ä–æ–¥–µ, –Ω–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –≤—ã–±—Ä–æ—Å–æ–≤ –∏ –∫–æ–º—Ñ–æ—Ä—Ç. –ü–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç —Å–Ω–∏–∑–∏—Ç—å —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ –±–µ–∑ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —á–∏—Å—Ç—É—é —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—é."
            }
        }

def save_data(data):
    with open(DATA_PATH, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

category_blocks = load_data()

def prepare_tfidf_data(keywords_dict):
    labels = list(keywords_dict.keys())
    texts = [keywords_dict[k] for k in labels]
    vectorizer = TfidfVectorizer()
    matrix = vectorizer.fit_transform(texts)
    return labels, matrix, vectorizer

def find_best_match(query, labels, matrix, vectorizer, top_k=2):
    query_vec = vectorizer.transform([query])
    similarities = cosine_similarity(query_vec, matrix).flatten()
    top_indices = similarities.argsort()[::-1][:top_k]
    return [(labels[i], round(similarities[i], 3)) for i in top_indices]

def semantic_search_grouped(query, top_k=2):
    grouped_results = {}
    for cat_name, data in category_blocks.items():
        labels, matrix, vectorizer = prepare_tfidf_data(data)
        matches = find_best_match(query, labels, matrix, vectorizer, top_k)
        grouped_results[cat_name] = matches
    return grouped_results

def add_to_category(category, class_label, query):
    if class_label in category_blocks[category]:
        category_blocks[category][class_label] += f" {query}."
    else:
        category_blocks[category][class_label] = query
    save_data(category_blocks)

# === Streamlit UI ===
st.set_page_config(page_title="–ê–≤—Ç–æ–ü–æ–¥–±–æ—Ä", layout="centered")
st.title("üöò –£–º–Ω—ã–π –ø–æ–¥–±–æ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è")

query = st.text_input("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞:")

if query:
    st.subheader("üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
    results = semantic_search_grouped(query)
    feedback_submitted = False
    st.subheader("üí¨ –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –º–Ω–µ–Ω–∏–µ–º:")
    for cat, matches in results.items():
        st.markdown(f"### {cat}")
        for label, score in matches:
            st.write(f"- **{label}**")

        with st.expander(f"üîß –£—Ç–æ—á–Ω–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é ¬´{cat}¬ª"):
            available = list(category_blocks[cat].keys())
            selected = st.multiselect(
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é(–∏–µ) –∫–∞—Ç–µ–≥–æ—Ä–∏—é(–∏) –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:", 
                available, 
                key=cat
            )
            if st.button(f"‚úÖ –ü—Ä–∏—Å–≤–æ–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{cat}¬ª", key=f"btn_{cat}"):
                for s in selected:
                    add_to_category(cat, s, query)
                st.success(f"–ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é ¬´{cat}¬ª: {', '.join(selected)}")
                feedback_submitted = True

    if feedback_submitted:
        st.info("üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —É—á–∞—Å—Ç–∏–µ! –í–∞—à –≤–∫–ª–∞–¥ –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ.")
